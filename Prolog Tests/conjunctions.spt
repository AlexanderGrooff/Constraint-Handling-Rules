module conjunctions

language Prolog

test simple conjunction [[
	a :- b, c.
	b.
	c.
	?- a.
]] run evaluate-full to Result("true", [])

test simple false conjunction [[
	a :- b,c .
	b.
	?- a.
]] run evaluate-full to Result("false", [])

test family example [[
	mother_child(trude, sally).

	father_child(tom, sally).
	father_child(tom, erica).
	father_child(mike, tom).

	sibling(X, Y)      :- parent_child(Z, X), parent_child(Z, Y).

	parent_child(X, Y) :- father_child(X, Y).
	parent_child(X, Y) :- mother_child(X, Y).

	?- sibling(sally, erica).
]] run evaluate-full to Result("true", [])

test three conjunction [[
	a(3).
	b(3).
	c(3).
	?- a(Z), b(Z), c(Z).
]] run evaluate-full to Result("true", [Binding("Z", Int("3"))])

test conjunction query [[
	a.
	b.
	?- a,b.
]] run evaluate-full to Result("true", [])

test conjunction local variable binding [[
	b(1, 0). 
	c(0, 1).
	?- b(X, Y), c(Y, X).
]] run evaluate-full to Result("true", [Binding("X", Int("1")), Binding("Y", Int("0"))])

test conjunction should have no conflicting local variables [[
	a :- c(X, X).
	b(1, 1).
	c(0, 0).
	?- a, b(X, X).
]] run evaluate-full to Result("true", [Binding("X", Int("1"))])
