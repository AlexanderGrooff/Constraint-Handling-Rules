module arithmetic

imports
  src-gen/signatures/-
  desugar

rules
  arith-int-bin: (AddOp(), i1, i2) -> <addi> (i1, i2)
  arith-int-bin: (SubOp(), i1, i2) -> <subti> (i1, i2)
  arith-int-bin: (MultOp(), i1, i2) -> <muli> (i1, i2)
  arith-int-bin: (DivOp(), i1, i2) -> <divi> (i1, i2)

  arith-float-bin: (AddOp(), f1, f2) -> <addr> (f1, f2)
  arith-float-bin: (SubOp(), f1, f2) -> <subtr> (f1, f2)
  arith-float-bin: (MultOp(), f1, f2) -> <mulr> (f1, f2)
  arith-float-bin: (DivOp(), f1, f2) -> <divr> (f1, f2)

  comp-bin: (NumEqOp(), i1, i2) -> <eq> (i1, i2)
  comp-bin: (NumNEqOp(), i1, i2) -> <not(eq)> (i1, i2)
  comp-bin: (LtOp(), i1, i2) -> <lt> (i1, i2)
  comp-bin: (GtOp(), i1, i2) -> <gt> (i1, i2)
  comp-bin: (LtEOp(), i1, i2) -> <leq> (i1, i2)
  comp-bin: (GtEOp(), i1, i2) -> <geq> (i1, i2)

  arithmetic: Int(_) -> <id>
  arithmetic: Float(_) -> <id>
  arithmetic: ArithBinOp(o, e1, e2) -> Int(<arith-int-bin; int-to-string> (o, <string-to-int> i1, <string-to-int> i2))
    where (Int(i1), Int(i2)) := (<arithmetic> e1, <arithmetic> e2)
  arithmetic: ArithBinOp(o, e1, e2) -> Float(<arith-float-bin; real-to-string> (o, <string-to-real> f, <string-to-real> i))
    where (Float(f), Int(i)) := (<arithmetic> e1, <arithmetic> e2)
  arithmetic: ArithBinOp(o, e1, e2) -> Float(<arith-float-bin; real-to-string> (o, <string-to-real> i, <string-to-real> f))
    where (Int(i), Float(f)) := (<arithmetic> e1, <arithmetic> e2)
  arithmetic: ArithBinOp(o, e1, e2) -> Float(<arith-float-bin; real-to-string> (o, <string-to-real> f1, <string-to-real> f2))
    where (Float(f1), Float(f2)) := (<arithmetic> e1, <arithmetic> e2)
